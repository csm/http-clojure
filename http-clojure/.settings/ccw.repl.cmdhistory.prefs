cmdhistory=[";; Switching to http-clojure namespace" "(def x (http-client nil))" "x" "(GET x \\"A\\")" "(GET x \\"A\\" \\"b\\" \\"c\\")" ";; Switching to http-clojure namespace" "(def client (http-client. nil nil nil))" "(get client nil \\"http\://www.google.com\\" {})" "(import '(java.net URI))" "(get client nil (URI. \\"http\://www.google.com\\") {})" "(put client nil (URI. \\"http\://foo.com\\" {\\"content-type\\" \\"text/plain\\"} \\"The moon rises at noon\\")\\n     )" "(put nil (URI. \\"http\://foo.bar/stuff\\") {\\"content-type\\" \\"text/plain\\"} \\"The moon rises at noon\\")" "(put client (URI. \\"http\://foo.bar/stuff\\") {\\"content-type\\" \\"text/plain\\"} \\"The moon rises at noon\\")" ";; Switching to http-clojure namespace" "(def client (http-client. nil nil nil))" "(import '(java.net URI))" "(put client (URI. \\"http\://google.com/\\") {} \\"The moon rises at noon\\")" "(def client (http-client. nil nil nil))" "(put client (URI. \\"http\://www.google.com/stuff\\") {\\"content-type\\" \\"text/plain\\"} \\"the moon rises at noon\\")" "(def client (http-client. nil nil nil))" "(http-client.)" "(put cilent (URI. \\"http\://www.google.com/stuff\\") {\\"content-type\\" \\"text/plain\\"} \\"the moon rises at noon\\")" "(put client (URI. \\"http\://www.google.com/stuff\\") {\\"content-type\\" \\"text/plain\\"} \\"the moon rises at noon\\")" "(import '(java.nio ByteBuffer))" "(asbuffers [(ByteBuffer/allocate 1) (ByteBuffer/allocate 1)])" "(asbuffers [(ByteBuffer/allocate 1) (ByteBuffer/allocate 1) \\"foobar\\"])" ";; Switching to http-clojure namespace" "(import '(java.util.concurrent Executors))" "(import '(java.nio.channels Selector))" "(def client (http-client (Executors/newFixedThreadPool 100) (Selector/open) nil))" "(def client (http-client. (Executors/newFixedThreadPool 100) (Selector/open) nil))" ";; Switching to http-clojure namespace" "(import '(java.util.concurrent Executors))" "(import '(java.nio.channels Selector))" "http-client" "(def client (http-client. (Executors/newFixedThreadPool 100) (Selector/open) nil))" "client" "(start client)" "(def client (http-client. (Executors/newFixedThreadPool 100) (Selector/open) nil))" "(start client)" ";; Switching to http-clojure namespace" "(import '(java.util.concurrent Executors))" "(import '(java.nio.channels Selector))" "(def client (http-client. (Executors/newFixedThreadPool 100) (Selector/open) nil))" "http-client" ";; Switching to http-clojure namespace" "http-clojure" "http_clojure" "client" "asbuffers" ";; Switching to http-clojure namespace" "cilent" "http-clojure" "http-clojure.client" "http-request" "client" ";; Switching to http namespace" "client" "(import '(java.util.concurrent Executors))" "(import '(java.nio.channels Selector))" "(def cli (client. (Executors/newFixedThreadPool 10) (Selector/open) nil))" "(def cli (client. (Executors/newFixedThreadPool 10) (Selector/open)))" "cli" "(import '(java.net URI))" "(get cli (URI. \\"http\://www.server.com/stuff\\") nil nil)" "(def cli (client. (Executors/newFixedThreadPool 10) (Selector/open)))" "(get cli (URI. \\"http\://server.com/stuff\\") nil nil)" "(def bufs (get cli (URI. \\"http\://server.com/stuff\\") nil nil))" "bufs" "(import '(java.nio.charset Charset))" "(.encode (Charset/forName \\"UTF-8\\") (first bufs))" "(.decode (Charset/forName \\"UTF-8\\") (.duplicate (first bufs)))" "(get cli (URI. \\"http\://server.com/stuff\\") nil nil)" "(def bufs (get cli (URI. \\"http\://server.com/stuff\\") nil nil))" "bufs" "(.decode (Charset/forName \\"UTF-8\\") (.duplicate (first bufs)))" "(.toString (.decode (Charset/forName \\"UTF-8\\") (.duplicate (first bufs))))" "(.toString (.decode (Charset/forName \\"UTF-8\\") (.duplicate (second bufs))))" "(def bufs (put cli (URI. \\"http\://server.com/stuff\\") nil {\\"Content-type\\" \\"text/plain\\"} \\"hello world\\"))" "(def bufs (put cli (URI. \\"http\://server.com/stuff\\") {\\"Content-type\\" \\"text/plain\\"} \\"hello world\\" nil))" "(map \#(.toString (.encode (Charset/forName \\"UTF-8\\") (.duplicate %))) bufs)" "(map \#(.toString (.decode (Charset/forName \\"UTF-8\\") (.duplicate %))) bufs)" "cli" "(\:selector cli)" "(def cli (client. (\:executor cli) (\:selector cli)))" "cli" "(def bufs (put cli (URI. \\"http\://server.com/stuff\\") {\\"Content-type\\" \\"text/plain\\"} \\"hello\\" nil))"]
eclipse.preferences.version=1
